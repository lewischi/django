upstream lewischi.com {
    server 127.0.0.1:8000 fail_timeout=0;
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).
    server unix:/home/lewischi/projects/active/django_project/gunicorn.sock fail_timeout=0;
    }

    server {
    	listen 80;
	#server_name 0.0.0.0;
	server_name lewischi.com;
        client_max_body_size 70M;
        access_log /home/lewischi/projects/active/django_project/logs/nginx-access.log;
        error_log /home/lewischi/projects/active/django_project/logs/nginx-error.log;
   
    
     root /home/lewischi/projects/active/django_project/static;
     index index.html index.htm;
     
    location /static/ {
        alias /home/lewischi/projects/active/django_project/static/;
    }

    location /media/ {
        alias /home/lewischi/projects/active/django_project/media/;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        #fastcgi_index index.php;
        include fastcgi_params;    
    }   


    location / {
    
    index index.html;
    # default_type "text/html";
    # try_files $uri.html $uri $uri/ /index.html;    
     #try_files $uri $uri/index.htm $uri/index.html $uri/static/index.html;    
    #############

    
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    proxy_redirect off;
    ## Try to serve static files from nginx, no point in making an
    ## *application* server like Unicorn/Rainbows! serve static files.
    
	#if (!-f $request_filename) {
	#    #proxy_pass http://lewischi.com;
    	#    proxy_pass http://127.0.0.1:8000;
	#    break;
        #} # if
    } # location
}

